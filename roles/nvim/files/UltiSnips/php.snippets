snippet vcom
/**
 * @var ${1:info}
 */
${2:private} ${3:v};
endsnippet

snippet fun
${1:public} function ${2:name}(${3:})${4:}
{
	${5:}
}
endsnippet


snippet lambda
function (${3:})${4:} {
	${5:}
}
endsnippet

snippet for
for (${1:$i} = ${2:0}; $1 < ${3:limit}; $1++) {
	${4:}
}
endsnippet

snippet fore
foreach (${1:$array} as ${2:$value}) {
	${3:}
}
endsnippet

snippet if
if (${1:condition}) {
	${2://code};
}${3:}
endsnippet

snippet set
/**
 * @param $2 $3
 */
public function set${1:Value}(${2:type} ${3:value}) 
{
	$this->${4:value} = $3;
}
endsnippet

snippet get
/**
 * @return $2
 */
public function get${1:Value}(): ${2:type}
{
	return $this->${3:value};
}
endsnippet

snippet construct
${1:public} function __construct(${2:params})
{
	${3:}
}
endsnippet

snippet invoke
${1:public} function __invoke(${2:params})
{
	${3:}
}
endsnippet

snippet testclass
<?php

namespace ${1:namespace};

use PHPUnit\Framework\TestCase;

class ${2:ClassName}Test extends TestCase
{
	public function test${3:MethodName}()
	{
		${4://test}
	}
}
endsnippet

snippet class 
<?php

namespace ${1:namespace};
${2:}

/**
* Class $4
* @package $1
*/
${3:final} class ${4:Klassenname} ${5:}
{
	${6:}
}
endsnippet

snippet trait 
<?php

namespace ${1:namespace};
${2:}

/**
* Trait $4
* @package $1
*/
trait ${4:Name}
{
	${5:}
}
endsnippet

snippet interface 
<?php

namespace ${1:namespace};
${2:}

/**
* Interface $3
* @package $1
*/
interface ${3:Klassenname} ${4:}
{
	${5:}
}
endsnippet

snippet is
/**
 * @return bool
 */
public function is${1:Value}(): bool
{
	return $this->${3:value};
}
endsnippet

snippet d
var_dump(${1:});
exit;
endsnippet

snippet f
file_put_contents('test.${1:txt}', ${2:});
exit;
endsnippet

snippet p
print_r({1:}', ${2:false});
exit;
endsnippet

snippet psy
eval(\Psy\sh());
endsnippet
